# TelegramBot_v2 - —ç—Ç–æ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏, —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –Ω–∞ Python —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ telebot.
# –û–Ω –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å–æ–∑–¥–∞–≤–∞—Ç—å, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, —É–¥–∞–ª–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ –∑–∞–¥–∞—á–∞–º.
# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç, –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –¥–∞—Ç—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.


# –ò–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫

import telebot
import datetime
import time
import threading
import csv
import os
import schedule
import logging
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import random

logging.basicConfig(filename='bot.log', level=logging.DEBUG)

bot = telebot.TeleBot('ADD_YOUR_TOKEN', parse_mode='HTML')

TASKS_FILE = 'task.csv'
USERS_FILE = 'users.csv'

PRIORITY_EMOJIS = {
    '–í—ã—Å–æ–∫–∏–π': 'üî¥',
    '–°—Ä–µ–¥–Ω–∏–π': 'üü†',
    '–ù–∏–∑–∫–∏–π': 'üü¢'
}

CATEGORIES = ['–£—á–µ–±–∞', '–†–∞–±–æ—Ç–∞', '–õ–∏—á–Ω–æ–µ', '–î—Ä—É–≥–æ–µ']

user_data = {}


# –§—É–Ω–∫—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

def register_user(user_id, first_name):
    try:
        with open(USERS_FILE, 'r', encoding='utf-8') as file:
            reader = csv.reader(file)
            users = list(reader)
            if not any(user[0] == str(user_id) for user in users):
                with open(USERS_FILE, 'a', encoding='utf-8', newline='') as file:
                    writer = csv.writer(file)
                    writer.writerow([user_id, first_name])
    except FileNotFoundError:
        with open(USERS_FILE, 'w', encoding='utf-8', newline='') as file:
            writer = csv.writer(file)
            writer.writerow([user_id, first_name])


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

def load_tasks_from_csv(user_id):
    tasks = []
    file_path = f'task_user_{user_id}.csv'
    try:
        with open(file_path, 'r', encoding='utf-8') as file:
            reader = csv.DictReader(file)
            for row in reader:
                tasks.append({
                    'name': row['name'],
                    'description': row['description'],
                    'priority': row['priority'],
                    'category': row['category'],
                    'due_date': row['due_date'],
                    'reminder': row['reminder']
                })
    except FileNotFoundError:
        print(f"–§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
    return tasks


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –≤ —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

def save_task_to_csv(task, user_id):
    file_path = f'task_user_{user_id}.csv'
    try:
        file_exists = os.path.exists(file_path)
        with open(file_path, 'a', newline='', encoding='utf-8') as file:
            fieldnames = ['name', 'description', 'priority', 'category', 'due_date', 'reminder']
            writer = csv.DictWriter(file, fieldnames=fieldnames)
            if not file_exists:
                writer.writeheader()
            writer.writerow(task)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –∑–∞–¥–∞—á–∏ –≤ —Ñ–∞–π–ª: {e}")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –≤ —Ñ–∞–π–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

def update_task_in_csv(tasks, user_id):
    file_path = f'task_user_{user_id}.csv'
    try:
        with open(file_path, 'w', newline='', encoding='utf-8') as file:
            writer = csv.DictWriter(file,
                                    fieldnames=['name', 'description', 'priority', 'category', 'due_date', 'reminder'])
            writer.writeheader()
            writer.writerows(tasks)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á

def ask_for_task_details(message, step=0):
    chat_id = message.chat.id
    if chat_id not in user_data:
        user_data[chat_id] = {}
    task = user_data[chat_id]

    if step == 0:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
        bot.register_next_step_handler(message, ask_for_task_details, step=1)
    elif step == 1:
        task['name'] = message.text
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
        bot.register_next_step_handler(message, ask_for_task_details, step=2)
    elif step == 2:
        task['description'] = message.text
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–¥–∞—á–∏ (–í—ã—Å–æ–∫–∏–π, –°—Ä–µ–¥–Ω–∏–π, –ù–∏–∑–∫–∏–π):")
        bot.register_next_step_handler(message, ask_for_task_details, step=3)
    elif step == 3:
        priority = message.text
        if priority not in PRIORITY_EMOJIS:
            bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑: –í—ã—Å–æ–∫–∏–π, –°—Ä–µ–¥–Ω–∏–π, –ù–∏–∑–∫–∏–π.")
            bot.register_next_step_handler(message, ask_for_task_details, step=3)
        else:
            task['priority'] = priority
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞–¥–∞—á–∏ (–£—á–µ–±–∞, –†–∞–±–æ—Ç–∞, –õ–∏—á–Ω–æ–µ, –î—Ä—É–≥–æ–µ):")
            bot.register_next_step_handler(message, ask_for_task_details, step=4)
    elif step == 4:
        category = message.text
        if category not in CATEGORIES:
            bot.send_message(message.chat.id, f"–ù–µ–≤–µ—Ä–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑: {', '.join(CATEGORIES)}.")
            bot.register_next_step_handler(message, ask_for_task_details, step=4)
        else:
            task['category'] = category
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ (—Ñ–æ—Ä–º–∞—Ç: –¥–¥-–º–º-–≥–≥–≥–≥):")
            bot.register_next_step_handler(message, ask_for_task_details, step=5)
    elif step == 5:
        due_date = message.text
        try:
            datetime.datetime.strptime(due_date, '%d-%m-%Y')
            task['due_date'] = due_date
            save_task_to_csv(task, chat_id)
            bot.send_message(message.chat.id, "–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
            del user_data[chat_id]
        except ValueError:
            bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –¥–¥-–º–º-–≥–≥–≥–≥.")
            bot.register_next_step_handler(message, ask_for_task_details, step=5)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start

@bot.message_handler(commands=['start'])
def start(message):
    register_user(message.from_user.id, message.from_user.first_name)
    bot.reply_to(message, f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∞–º–∏.')

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    tasks = load_tasks_from_csv(message.from_user.id)

    if not tasks:
        bot.send_message(message.chat.id,
                         "<b>–£ —Ç–µ–±—è –Ω–µ—Ç –∑–∞–¥–∞—á!</b>\n–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ –º–æ–∂–Ω–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã <b>/add_task</b>.",
                         parse_mode="HTML")
    else:
        bot.send_message(message.chat.id,
                         f"<b>–£ —Ç–µ–±—è {len(tasks)} –∑–∞–¥–∞—á(–∏)!</b>\n–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Ö –º–æ–∂–Ω–æ –ø–æ –∫–æ–º–∞–Ω–¥–µ <b>/task_list</b>.",
                         parse_mode="HTML")

    bot.send_message(message.chat.id, "–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π <b>/help</b>.",
                     parse_mode="HTML")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /task_list

@bot.message_handler(commands=['task_list'])
def task_list(message):
    tasks = load_tasks_from_csv(message.chat.id)
    if not tasks:
        bot.reply_to(message, "–£ —Ç–µ–±—è –Ω–µ—Ç –∑–∞–¥–∞—á.")
        return

    response = "<b>–¢–≤–æ–∏ –∑–∞–¥–∞—á–∏:</b>\n\n"
    for task in tasks:
        emoji = PRIORITY_EMOJIS.get(task['priority'], '‚ö™')
        response += (
            f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {task['name']}\n"
            f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {task['description']}\n"
            f"<b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</b> {emoji} {task['priority']}\n"
            f"<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {task['category']}\n"
            f"<b>–í—ã–ø–æ–ª–Ω–∏—Ç—å –¥–æ:</b> {task['due_date']}\n\n"
        )
    bot.send_message(message.chat.id, response)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help

@bot.message_handler(commands=['help'])
def help(message):
    help_text = """
    <b>–ü—Ä–∏–≤–µ—Ç! –í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>

    <b>/start</b> - –ù–∞—á–Ω–∏ —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º. –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è.

    <b>/task_list</b> - –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–¥–∞—á, –∫–æ—Ç–æ—Ä—ã–µ —É —Ç–µ–±—è –µ—Å—Ç—å.

    <b>/add_task</b> - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É. –ë–æ—Ç –ø–æ—à–∞–≥–æ–≤–æ –∑–∞–ø—Ä–æ—Å–∏—Ç —É —Ç–µ–±—è –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏.

    <b>/delete_task</b> - –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É. –ë–æ—Ç –ø–æ–∫–∞–∂–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–≤–æ–∏—Ö –∑–∞–¥–∞—á, –∏ —Ç—ã —Å–º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å, –∫–∞–∫—É—é —É–¥–∞–ª–∏—Ç—å.

    <b>/edit_task</b> - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É. –ë–æ—Ç –ø—Ä–µ–¥–ª–æ–∂–∏—Ç –≤—ã–±—Ä–∞—Ç—å –∑–∞–¥–∞—á—É –∏ –∏–∑–º–µ–Ω–∏—Ç—å –µ—ë –Ω–∞–∑–≤–∞–Ω–∏–µ, –æ–ø–∏—Å–∞–Ω–∏–µ, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç, –¥–∞—Ç—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é.

    <b>/remind</b> - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –∑–∞–¥–∞—á–∏. –¢—ã –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –∑–∞–¥–∞—á—É –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–ª—è –Ω–µ—ë –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–µ –≤—Ä–µ–º—è.

    <b>/help</b> - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥.

    <b>–ü–æ–¥—Å–∫–∞–∑–∫–∞:</b> –î–ª—è –∫–∞–∂–¥–æ–π –∫–æ–º–∞–Ω–¥—ã —Ç—ã –º–æ–∂–µ—à—å —Å–ª–µ–¥–æ–≤–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º, –∫–æ—Ç–æ—Ä—ã–µ –±–æ—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —à–∞–≥ –∑–∞ —à–∞–≥–æ–º.

    –ï—Å–ª–∏ —É —Ç–µ–±—è –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Å—è –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è!
    """
    bot.reply_to(message, help_text, parse_mode="HTML")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add_task

@bot.message_handler(commands=['add_task'])
def add_task(message):
    bot.send_message(message.chat.id, "–ù–∞—á–Ω–µ–º –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.")
    ask_for_task_details(message)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /delete_task —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏

@bot.message_handler(commands=['delete_task'])
def delete_task(message):
    tasks = load_tasks_from_csv(message.chat.id)
    if not tasks:
        bot.reply_to(message, "–£ —Ç–µ–±—è –Ω–µ—Ç –∑–∞–¥–∞—á.")
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏

    markup = InlineKeyboardMarkup()
    for idx, task in enumerate(tasks, 1):
        button = InlineKeyboardButton(task['name'], callback_data=f"delete_{idx}")
        markup.add(button)

    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=markup)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏

@bot.callback_query_handler(func=lambda call: call.data.startswith("delete_"))
def process_task_for_deletion(call):
    task_index = int(call.data.split('_')[1]) - 1  # –ò–Ω–¥–µ–∫—Å –∑–∞–¥–∞—á–∏
    tasks = load_tasks_from_csv(call.message.chat.id)

    if task_index < 0 or task_index >= len(tasks):
        bot.send_message(call.message.chat.id, "–ù–µ–≤–µ—Ä–Ω–∞—è –∑–∞–¥–∞—á–∞.")
        return

    task = tasks.pop(task_index)  # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ —Å–ø–∏—Å–∫–∞
    update_task_in_csv(tasks, call.message.chat.id)  # –û–±–Ω–æ–≤–ª—è–µ–º CSV —Ñ–∞–π–ª

    bot.send_message(call.message.chat.id, f"–ó–∞–¥–∞—á–∞ '{task['name']}' –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∑–∞–¥–∞—á–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è

def process_task_for_deletion(message, tasks):
    try:
        task_number = int(message.text)
        if task_number < 1 or task_number > len(tasks):
            bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            bot.register_next_step_handler(message, process_task_for_deletion, tasks)
        else:
            task = tasks.pop(task_number - 1)  # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ —Å–ø–∏—Å–∫–∞
            update_task_in_csv(tasks, message.chat.id)  # –û–±–Ω–æ–≤–ª—è–µ–º CSV —Ñ–∞–π–ª
            bot.send_message(message.chat.id, f"–ó–∞–¥–∞—á–∞ '{task['name']}' –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.")
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏.")
        bot.register_next_step_handler(message, process_task_for_deletion, tasks)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /edit_task —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏

@bot.message_handler(commands=['edit_task'])
def edit_task(message):
    tasks = load_tasks_from_csv(message.chat.id)
    if not tasks:
        bot.reply_to(message, "–£ —Ç–µ–±—è –Ω–µ—Ç –∑–∞–¥–∞—á.")
        return

    # –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–∏—Ä–∞–µ–º –∑–∞–¥–∞—á—É –∏–∑ —Å–ø–∏—Å–∫–∞

    markup = InlineKeyboardMarkup()
    for idx, task in enumerate(tasks, 1):
        markup.add(InlineKeyboardButton(task['name'], callback_data=f"choose_task_{idx}"))

    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=markup)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∑–∞–¥–∞—á–∏

@bot.callback_query_handler(func=lambda call: call.data.startswith("choose_task_"))
def choose_task_for_editing(call):
    task_index = int(call.data.split('_')[2]) - 1  # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –∑–∞–¥–∞—á–∏
    tasks = load_tasks_from_csv(call.message.chat.id)

    if task_index < 0 or task_index >= len(tasks):
        bot.send_message(call.message.chat.id, "–ù–µ–≤–µ—Ä–Ω–∞—è –∑–∞–¥–∞—á–∞.")
        return

    task = tasks[task_index]

    # –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∑–∞–¥–∞—á–∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –µ—ë –ø–æ–ª—è

    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("–ù–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"edit_{task_index}_name"))
    markup.add(InlineKeyboardButton("–û–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"edit_{task_index}_description"))
    markup.add(InlineKeyboardButton("–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç", callback_data=f"edit_{task_index}_priority"))
    markup.add(InlineKeyboardButton("–î–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è", callback_data=f"edit_{task_index}_due_date"))
    markup.add(InlineKeyboardButton("–ö–∞—Ç–µ–≥–æ—Ä–∏—è", callback_data=f"edit_{task_index}_category"))

    bot.send_message(call.message.chat.id, "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?", reply_markup=markup)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏

@bot.callback_query_handler(func=lambda call: call.data.startswith("edit_"))
def handle_task_edit_callback(call):
    bot.answer_callback_query(call.id)  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º callback

    # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ callback_data
    task_index = int(call.data.split('_')[1])
    action = '_'.join(call.data.split('_')[2:])  # –°–æ–µ–¥–∏–Ω—è–µ–º –≤—Å—ë –ø–æ—Å–ª–µ –≤—Ç–æ—Ä–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞

    tasks = load_tasks_from_csv(call.message.chat.id)
    task = tasks[task_index]

    if action == "name":
        msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
        bot.register_next_step_handler(msg, edit_task_name, task, tasks)
    elif action == "description":
        msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
        bot.register_next_step_handler(msg, edit_task_description, task, tasks)
    elif action == "priority":
        msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–¥–∞—á–∏ (–í—ã—Å–æ–∫–∏–π, –°—Ä–µ–¥–Ω–∏–π, –ù–∏–∑–∫–∏–π):")
        bot.register_next_step_handler(msg, edit_task_priority, task, tasks)
    elif action == "due_date":  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
        msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ (—Ñ–æ—Ä–º–∞—Ç: –¥–¥-–º–º-–≥–≥–≥–≥):")
        bot.register_next_step_handler(msg, edit_task_due_date, task, tasks)
    elif action == "category":
        msg = bot.send_message(call.message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞–¥–∞—á–∏: {', '.join(CATEGORIES)}")
        bot.register_next_step_handler(msg, edit_task_category, task, tasks)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–µ–π –∑–∞–¥–∞—á–∏

def edit_task_name(message, task, tasks):
    task['name'] = message.text
    bot.send_message(message.chat.id, f"–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {task['name']}")
    update_task_in_csv(tasks, message.chat.id)
    bot.send_message(message.chat.id, "–ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è

def edit_task_description(message, task, tasks):
    task['description'] = message.text
    bot.send_message(message.chat.id, f"–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ.")
    update_task_in_csv(tasks, message.chat.id)
    bot.send_message(message.chat.id, "–ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

def edit_task_category(message, task, tasks):
    category = message.text
    if category not in CATEGORIES:
        bot.send_message(message.chat.id, f"–ù–µ–≤–µ—Ä–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑: {', '.join(CATEGORIES)}.")
        bot.register_next_step_handler(message, edit_task_category, task, tasks)
    else:
        task['category'] = category
        bot.send_message(message.chat.id, f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∑–∞–¥–∞—á–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {task['category']}")
        update_task_in_csv(tasks, message.chat.id)
        bot.send_message(message.chat.id, "–ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞

def edit_task_priority(message, task, tasks):
    priority = message.text
    if priority not in PRIORITY_EMOJIS:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑: –í—ã—Å–æ–∫–∏–π, –°—Ä–µ–¥–Ω–∏–π, –ù–∏–∑–∫–∏–π.")
        bot.register_next_step_handler(message, edit_task_priority, task, tasks)
    else:
        task['priority'] = priority
        bot.send_message(message.chat.id, f"–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–¥–∞—á–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {task['priority']}")
        update_task_in_csv(tasks, message.chat.id)
        bot.send_message(message.chat.id, "–ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã

def edit_task_due_date(message, task, tasks):
    try:
        due_date = message.text
        datetime.datetime.strptime(due_date, '%d-%m-%Y')  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞
        task['due_date'] = due_date
        bot.send_message(message.chat.id, f"–î–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {task['due_date']}")
        update_task_in_csv(tasks, message.chat.id)
        bot.send_message(message.chat.id, "–ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –¥–¥-–º–º-–≥–≥–≥–≥.")
        bot.register_next_step_handler(message, edit_task_due_date, task, tasks)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /remind

@bot.message_handler(commands=['remind'])
def remind(message):
    tasks = load_tasks_from_csv(message.chat.id)
    if not tasks:
        bot.reply_to(message, "–£ —Ç–µ–±—è –Ω–µ—Ç –∑–∞–¥–∞—á.")
        return

    response = "<b>–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:</b>\n\n"
    for idx, task in enumerate(tasks, 1):
        response += f"{idx}. {task['name']}\n"

    bot.send_message(message.chat.id, response)
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:")

    bot.register_next_step_handler(message, process_task_for_reminder, tasks)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∑–∞–¥–∞—á–∏ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è

def process_task_for_reminder(message, tasks):
    try:
        task_number = int(message.text)
        if task_number < 1 or task_number > len(tasks):
            bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            bot.register_next_step_handler(message, process_task_for_reminder, tasks)
        else:
            task = tasks[task_number - 1]
            bot.send_message(message.chat.id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∑–∞–¥–∞—á—É: {task['name']}. –£—Å—Ç–∞–Ω–æ–≤–∏–º –¥–ª—è –Ω–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.")

            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (—Ñ–æ—Ä–º–∞—Ç: –¥–¥-–º–º-–≥–≥–≥–≥ —á—á:–º–º):")
            bot.register_next_step_handler(message, process_reminder_time, task, tasks)
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏.")
        bot.register_next_step_handler(message, process_task_for_reminder, tasks)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è

def process_reminder_time(message, task, tasks):
    try:
        reminder_time = message.text
        reminder_datetime = datetime.datetime.strptime(reminder_time, '%d-%m-%Y %H:%M')
        task['reminder'] = reminder_datetime.strftime('%d-%m-%Y %H:%M')

        print(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –∑–∞–¥–∞—á–∏ '{task['name']}' –Ω–∞ {task['reminder']}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º

        update_task_in_csv(tasks, message.chat.id)

        bot.send_message(message.chat.id,
                         f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –∑–∞–¥–∞—á–∏ '{task['name']}' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {reminder_datetime.strftime('%d-%m-%Y %H:%M')}.")
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –¥–¥-–º–º-–≥–≥–≥–≥ —á—á:–º–º.")
        bot.register_next_step_handler(message, process_reminder_time, task, tasks)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º

def send_reminder_for_task(task, user_id):
    print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –¥–ª—è –∑–∞–¥–∞—á–∏ '{task['name']}'")

    emoji_priority = PRIORITY_EMOJIS.get(task['priority'], '‚ö™')  # –≠–º–æ–¥–∑–∏ –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
    reminder_message = (
        f"<b>‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!</b>\n\n"
        f"<b>–ó–∞–¥–∞—á–∞:</b> {task['name']}\n"
        f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {task['description']}\n\n"
        f"<b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</b> {emoji_priority} {task['priority']}\n"
        f"<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {task['category']}\n"
        f"<b>–í—ã–ø–æ–ª–Ω–∏—Ç—å –¥–æ:</b> {task['due_date']}\n\n"
        f"<b>–ù–µ –∑–∞–±—É–¥—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É –≤ —Å—Ä–æ–∫!</b>"
    )

    bot.send_message(user_id, reminder_message, parse_mode='HTML')


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏ –∏—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è

def check_reminders():
    print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π...")
    users = {}
    try:
        with open(USERS_FILE, 'r', encoding='utf-8') as file:
            reader = csv.reader(file)
            for row in reader:
                user_id = row[0]
                tasks = load_tasks_from_csv(user_id)
                users[user_id] = tasks
    except FileNotFoundError:
        print("–§–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    for user_id, tasks in users.items():
        for task in tasks:
            if task['reminder']:
                reminder_time = datetime.datetime.strptime(task['reminder'], '%d-%m-%Y %H:%M')
                if reminder_time <= datetime.datetime.now():
                    send_reminder_for_task(task, user_id)
                    task['reminder'] = ''  # –æ—á–∏—â–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                    update_task_in_csv(tasks, user_id)


# –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

def schedule_reminder_check():
    schedule.every(1).minute.do(check_reminders)

    while True:
        schedule.run_pending()
        time.sleep(1)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞

if __name__ == '__main__':
    schedule_thread = threading.Thread(target=schedule_reminder_check)
    schedule_thread.daemon = True
    schedule_thread.start()

    bot.polling(none_stop=True)